#!/usr/bin/env node

let readline = require('readline');
let Writable = require('stream').Writable;
let app = require('../app');
let debug = require('debug')('triqscos:server');
let http = require('http');
const mongoose = require('mongoose');
const cfg = require('../config/db.config');
const MongoClient = require('mongodb').MongoClient;

/**
 * Requesting a password for a MongoDB instance to prevent leak
 */


let mutableStdout = new Writable({
  write: function(chunk, encoding, callback) {
    if (!this.muted)
      process.stdout.write(chunk, encoding);
    callback();
  }
});

mutableStdout.muted = false;

let rl = readline.createInterface({
  input: process.stdin,
  output: mutableStdout,
  terminal: true
});

let db = undefined;

rl.question('Password: ', function(password) {
  rl.close();
  MongoClient.connect(cfg.url.replace('%%%%%', password), async (err, client) => {
    if (err) {
      console.error("Connection error", err);
      process.exit();
    }
    console.log("Successfully connect to MongoDB.");
    startServer();
    app.locals.db = client.db('triqscos');
    app.locals.pages = app.locals.db.collection('pages');
    app.locals.content = app.locals.db.collection('content');
    console.log('Locals defined.');
  });
});


mutableStdout.muted = true;

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

function startServer() {
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
